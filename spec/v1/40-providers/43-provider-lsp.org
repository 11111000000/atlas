#+title: LSP/Compiler Providers (Advanced)
#+language: en
:PROPERTIES:
:ID: v1-43-provider-lsp
:STATUS: Informative
:VERSION: 1.0
:UPDATED: 2025-10-14
:SUMMARY: Optional high-precision providers via LSP/CLI (TS/JS/Py/Hs), contracts and limits.
:END:

* Purpose
- Provide precise imports/exports/reexports, types, and limited call/ref graphs.
- Augment (not replace) core IR; write advanced edges and facts with :source 'lsp|'cli.

* Contract
- Must implement the Providers Contract (v1-40-providers-contract).
- Capabilities declare :languages and :levels actually supported (typically L1â€“L3).
- Output kinds reflect canonical mapping (see v1-16-kind-mapping).

* Inputs/Outputs
- Input: project root; optional changed paths.
- Output: batches with (:symbols LIST) (:edges LIST) and (:facts LIST) where applicable.
- Determinism: providers must sort edges by (type, from, to) and symbols by (file, beg).

* Language notes
- TS/JS: prefer TypeScript compiler API/tsserver; extract module graph, exported symbols, reexports, type signatures. Edges: import/export/reexport/dynamic-import; Facts: type (:object "sig"), visibility.
- Python: Jedi/pylsp; resolve defs/refs, module imports, decorators. Edges: import/call/ref; Facts: type hints (PEP 484) when available.
- Haskell: HLS; module graph, exported list, type signatures, instances. Edges: import/type-ref/instance-of/constructor-of; Facts: full type.
- Lisp: can be used to enrich call/ref; elisp-refs is preferred for local usage (see v1-41-provider-elisp).

* Performance and budget
- Per-file and global caps on number of edges; token and time budgets enforced by caller.
- Cache across runs; fall back to treesit/heuristics when tool is unavailable.

* Safety
- Never block Emacs main thread; stream batches; fail soft with clear :source and logging.
- Missing tools are not an error; provider may skip with zero output.
