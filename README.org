#+title: Atlas — Universal Project Map for Emacs
#+author: Peter Kosov <11111000000@email.com>
#+language: en
#+options: toc:nil num:t
#+startup: show2levels
[[https://github.com/11111000000/atlas/actions/workflows/ci.yml/badge.svg][CI status]]

* Overview
Atlas is a universal, extensible project map for Emacs. It builds and uses a structured map of your project: file inventory, symbols, dependencies, fast lexical retrieval, and budget-aware context planning for tasks and LLMs. v1 focuses on Emacs Lisp, with a design and schemas ready to grow to polyglot repositories.

* Highlights (v1, Emacs Lisp first)
- Build a map (L0 files, L1 symbols, L2 require/provide edges)
- Incremental, deterministic indexing with TTL and change detection
- Simple, fast lexical search powered by a lazy in-memory inverted index
- Context planning: minimal spans around definitions under a token budget
- Exports: subgraphs to DOT/Mermaid; JSON pack for LLMs; APM v2 text
- Async indexing, watch-mode, progress indicator, event bus
- Storage: stable, versioned S-expressions under .context/atlas/v1/

* Design for growth
- Clean core + thin ports: pure data modeling and transforms; effects at edges
- Stable alist schemas, versioned on-disk format; deterministic outputs
- Pluggable providers (Elisp today; Treesit/LSP/external CLI later)
- Facts enrichment layer (optional): provenance, confidence, TTL

- Requirements
- Emacs 27.1 or newer
- Optional: elisp-refs (reserved for deeper call/ref; off by default)
- Optional: transient (actions menu in Atlas Entities)
- Optional: all-the-icons (icons in entity tree)
- Optional: posframe (peek backend in some setups)
- No external services; fully offline by default

- Installation
* Local clone (simplest)
#+begin_src emacs-lisp
(add-to-list 'load-path (expand-file-name "lisp" "~/Code/atlas"))
(require 'atlas)      ;; core/entrypoint
;; Optional UI and exports:
(require 'atlas-ui)
(require 'atlas-export)
(require 'atlas-explore)
#+end_src

* use-package (lazy-load)
#+begin_src emacs-lisp
(use-package atlas
  :load-path (lambda () (expand-file-name "lisp" "~/Code/atlas"))
  :commands (atlas-open atlas-close
             atlas-index atlas-reindex-changed atlas-update atlas-stats
             atlas-query-command atlas-explore
             atlas-graph-export-command atlas-export-llm-command
             atlas-export-apm-v2-command atlas-export-llm-pack-command
             atlas-entity-tree atlas-entities
             atlas-watch-mode atlas-watch-add-root atlas-watch-remove-root atlas-watch-list-roots
             atlas-progress-mode
             atlas-log-open atlas-log-clear)
  :init
  ;; Minimal progress in mode-line
  (require 'atlas-ui)
  (atlas-progress-mode 1))
#+end_src

* Quick enable for local development
- Load helper and enable progress/watch:
#+begin_src emacs-lisp
(load (expand-file-name "lisp/atlas-setup.el" "~/Code/atlas"))
(atlas-setup-enable)                     ;; turn on progress UI
;; (atlas-setup-enable "~/Code/atlas/")  ;; also add a root to watch
#+end_src

- Quick Start
* Open, index, and inspect
#+begin_src emacs-lisp
(let ((root default-directory))
  (atlas-open root)
  (atlas-index root t)   ;; full rebuild; with prefix: C-u M-x atlas-index
  (atlas-stats root))    ;; => (:files N :symbols M :edges K :t-indexed SEC :schema 1)
#+end_src

* Query and jump
#+begin_src emacs-lisp
(let* ((res (atlas-query default-directory "defcustom theme" :k 10))
       (first (car res)))
  (when first
    (message "First result: %S" first)))
;; Interactive: M-x atlas-query-command
#+end_src

* Explore buffer (clickable)
#+begin_src emacs-lisp
(atlas-explore default-directory "completion table" 20)
;; RET or [Open] to jump to file/position
#+end_src

* Plan a minimal context (LLM-friendly)
#+begin_src emacs-lisp
(atlas-plan-context default-directory "how to configure theme defaults?"
                    :k 12 :budget 1200 :model 'brief)
;; => (:files ... :spans ... :rationale ... :est-tokens ... :items ...)
#+end_src

* Export a graph (DOT / Mermaid)
#+begin_src emacs-lisp
(atlas-graph-export default-directory
                    '("lisp/foo.el" "feature:foo-core")
                    :depth 1 :format 'dot :path "/tmp/atlas.dot")
;; Interactive: M-x atlas-graph-export-command
#+end_src

* Export packs for LLMs
#+begin_src emacs-lisp
;; JSON pack
(atlas-export-llm default-directory "find defun foo"
                  :k 12 :graph-depth 1 :path "/tmp/atlas-llm.json")
;; S-expression pack (interoperable, primary)
(atlas-export-llm-pack default-directory "find defun foo"
                       :k 12 :graph-depth 1 :path "/tmp/atlas-llm.sexp")
;; APM v2 textual export
(atlas-export-apm-v2 default-directory :path "/tmp/atlas.apm.txt")
#+end_src

* Watch for changes and show progress
#+begin_src emacs-lisp
;; Watch current project (global minor-mode toggles current default-directory)
(atlas-watch-mode 1)
;; Or manage multiple roots:
(atlas-watch-add-root default-directory)
(atlas-watch-list-roots)
;; Mode-line progress:
(require 'atlas-ui)
(atlas-progress-mode 1)
#+end_src

- Concepts and Data
* IR (v1, Emacs Lisp)
- Files: (:path REL :size INT :mtime FLOAT :hash STR|nil :lang elisp :flags plist)
- Symbols: (:id STR :file REL :name STR :kind SYM :beg INT :end INT
             :sig STR|nil :doc1 STR|nil :exported? BOOL :source 'elisp :lang 'elisp)
- Edges: (:type SYM|STR :from KEY :to KEY :weight FLOAT|nil :source SYM)
- Summaries: optional, append-only (file/symbol commentary)
- Facts: optional enrichment with provenance/priority (advanced)

* Identity and keys
- Stable symbol id: LANG:REL#NAME@BEG-END/KIND (v1: LANG=elisp; KIND as string)
- Edge keys: file REL, symbol id, or typed virtual keys ("feature:NAME", …)

* On-disk layout (versioned)
- Root: <project>/.context/atlas/v1/
- Files:
  - meta.sexp — (:schema INT :project-root STR :generated-at FLOAT :counts plist :languages list :opts plist)
  - files.sexp — list of File plists
  - symbols.sexp — list of Symbol plists
  - edges.sexp — list of Edge plists
  - summaries.sexp — optional summaries
  - facts.sexp — optional enrichment

- Usage
* Lifecycle
- (atlas-open ROOT), (atlas-close ROOT), (atlas-state ROOT), (atlas-root-dir ROOT)
- (atlas-stats ROOT) → (:files N :symbols M :edges K :facts F :summaries S :t-indexed SEC :schema INT)

* Indexing
- (atlas-index ROOT &optional FULL-OR-CHANGED)
  - t → full rebuild
  - list-of-paths → changed-only
  - nil → TTL policy: full if stale, else changed-only
- (atlas-reindex-changed ROOT) — convenience for TTL policy
- (atlas-index-async ROOT &key changed emit done) → (:token :cancel)
- (atlas-update ROOT PATHS) — changed-only run for PATHS

* Query and plan
- (atlas-query ROOT KEYWORDS &key k kinds filters)
  - Return list of (:type 'symbol :id :score :file :range :name :sig :doc1)
- (atlas-plan-context ROOT QUERY &key k budget model)
  - Return (:files :spans :docs :rationale :est-tokens :items)

* Explorer buffer
- (atlas-explore ROOT QUERY &optional k)
  - Clickable results; RET/o to open at position

* Entity-centric tree (Atlas Entities)
- Open:
#+begin_src emacs-lisp
(let ((root default-directory))
  (atlas-open root)
  (atlas-entity-tree root))       ;; opens buffer "*Atlas Entities*"
;; Alias: (atlas-entities)
#+end_src
- Views
  - by-feature (default): Features → provider file → symbols
  - by-kind: Symbols grouped by kind (Function/Macro/Var/Custom/Const/Symbol)
  - search: “Search: <query>” results with local In/Out edge context
  - imports: Imports/Provides overview (alias of by-feature with heading)
  - edges: local neighborhood around selector (REL | feature:NAME | symbol id)
  - plan: “Plan: <query>, budget=N” — files and spans from atlas-plan-context
- Commands
  - atlas-entity-tree ROOT — open/reveal the tree for ROOT
  - atlas-entity-tree-set-view VIEW — switch view (by-feature|by-kind|search|imports|edges|plan)
  - atlas-entity-tree-search ROOT QUERY [K]
  - atlas-entity-tree-edges ROOT SELECTOR [DEPTH]
  - atlas-entity-tree-plan ROOT QUERY [K BUDGET]
- Key bindings (inside Atlas Entities buffer)
  - g       refresh
  - RET / o open item
  - v       peek item (side window preview)
  - d       toggle inline docstring at point
  - TAB     toggle fold at heading
  - n/j     next heading
  - p/k     previous heading
  - s       open Search view (prompt)
  - E       open Edges view (prompt)
  - P       open Plan view (prompt)
  - i       toggle follow-mode (auto-peek as point moves)
  - a       actions menu (transient if available; Open/Peek/Copy/Search/Edges/Plan)
- Behavior
  - Reacts to indexing events (:atlas-index-start/progress/done/error)
  - Deterministic ordering; text-first rendering; optional icons
  - No disk I/O in UI; reads from in-memory model

* Exports
- Graphs
  - (atlas-graph ROOT SELECTOR &key depth edge-types) → (:nodes :edges)
  - (atlas-graph-export ROOT SELECTOR &key depth edge-types format path)
  - Interactive: atlas-graph-export-command
- LLM packs
  - JSON: (atlas-export-llm ROOT QUERY &key k budget graph-depth path)
  - SEXP: (atlas-export-llm-pack ROOT QUERY &key k budget graph-depth path)
  - Interactive: atlas-export-llm-command, atlas-export-llm-pack-command
- APM v2 (textual)
  - (atlas-export-apm-v2 ROOT &key sections budget path)
  - Interactive: atlas-export-apm-v2-command

* Events and progress UI
- Bus API:
  - (atlas-events-subscribe TOPIC FN), (atlas-events-unsubscribe TOPIC FN)
  - Topics:
    - :atlas-index-start — args: :root STR :full t|nil
    - :atlas-index-progress — args: :files INT :symbols INT :edges INT
    - :atlas-index-done — args: :root STR :counts PLIST
    - :atlas-index-error — args: :root STR :reason SYMBOL
- Mode-line indicator:
  - (atlas-progress-mode 1) — compact “Atlas: f=X s=Y e=Z” or “Atlas: indexing…”

* Watch mode
- Global minor-mode using file-notify (when available)
  - (atlas-watch-mode) — toggle for current default-directory
  - (atlas-watch-add-root ROOT), (atlas-watch-remove-root ROOT), (atlas-watch-list-roots)
  - Triggers changed-only indexing for files matching atlas-watch-file-regexp (default "\\.el\\'")

- Configuration
* Indexing and store
- atlas-index-ttl (float): TTL for stale detection
- atlas-exclude-dirs (list of regexps): directories to skip
- atlas-max-file-size (int): limit deep parsing on large files
- atlas-hash-content (bool): compute sha256 for precise change detection
- atlas-store-compressed (bool): write .sexp.gz files
- atlas-segment-threshold (int): reserved for future segmentation

* Quality/balance
- atlas-elisp-use-elisp-refs (bool), atlas-elisp-refs-max-size (int): reserved for deeper call/ref
- atlas-debounce-interval (float): debounce async tasks
- atlas-parallel-limit (int): reserved for provider-level concurrency

* Planning
- atlas-plan-default-budget (int), atlas-plan-model (symbol)

* UI/Watch
- atlas-ui-progress-throttle (float)
- atlas-watch-file-regexp (regexp) — default "\\.el\\'"

* Tokenization (search)
- atlas-unicode-tokens (bool): enable Unicode-aware tokens (NFKC + [[:word:]]+)
- atlas-tokenize-camelcase (bool): split CamelCase into additional tokens (when Unicode tokens enabled)

- Performance Tips
- Exclude common vendor/build dirs via atlas-exclude-dirs
- Keep atlas-elisp-use-elisp-refs off unless deeper edges are needed
- Use (atlas-index-async ...) and watch-mode to avoid UI stalls
- Prefer compressed store (.sexp.gz) for CI artifacts; avoid compressing during hot loops

- Privacy and Offline
- No network calls; everything runs locally
- Stores live under .context/atlas/v1
- Logs and exports are explicit; nothing leaves your machine unless you share outputs

- Troubleshooting
- “No providers registered”: Require the Elisp provider
  - (require 'atlas-source-elisp) or ensure atlas is loaded normally (it auto-registers)
- Index seems stale: Force full rebuild
  - (atlas-index default-directory t)
- Nothing happens on watch: Verify file-notify availability and atlas-watch-file-regexp
- UI not updating: Ensure atlas-progress-mode is enabled; check atlas-log buffer

- FAQ
- Does Atlas send my code anywhere?
  - No. Atlas is offline by default; all data stays on your machine.
- Can I use Atlas without lore/context-navigator?
  - Yes. Atlas is a standalone library with interactive commands.
- Can I add other languages?
  - Yes. Add/register a provider that emits normalized files/symbols/edges; core schemas are language-agnostic.
- How stable are outputs?
  - Deterministic ordering and stable IDs are design goals; unchanged inputs produce unchanged outputs.

- Development and Tests
* Nix (flakes)
#+begin_src shell
nix run .#tests
# or
nix flake check -L
#+end_src

* Vanilla Emacs
#+begin_src shell
emacs -Q --batch -L lisp -l test/ert-runner.el
#+end_src

* Logging
- Open/Clear: (atlas-log-open), (atlas-log-clear)
- Config: atlas-log-enabled, atlas-log-level, atlas-log-max-lines

* Dump/Import (developer tooling)
#+begin_src emacs-lisp
(require 'atlas-dump)
;; Dump entire store to sexp
(atlas-dump default-directory 'all :format 'sexp :path "/tmp/atlas.sexp")
;; Import a batch (alist)
(atlas-import default-directory '((symbols . ...) (edges . ...) (:file . "lisp/foo.el")))
#+end_src

- Roadmap
* v1 (Elisp)
- Storage, indexing (TTL/changed-only), lexical search, planning, events, watch, explorer, DOT/Mermaid, LLM JSON/SEXP, APM v2
* v2 (polyglot)
- Treesit/LSP/external CLI providers; broader edge vocabulary (call/ref/import/…); optional segmentation
* v3
- Summaries pipeline, richer ranking/visualization, web viewer

- License
- GNU Lesser General Public License v2.1 or later (LGPL-2.1+). See LICENSE.

- Links
- Spec index: spec/v1/spec-index.sexp, link-map.sexp
- Docs: spec/v1/*.org (IR core, storage, model, providers, enrichment, exports, UI, conformance)
- Core modules: lisp/atlas/.el
- CI: GitHub Actions (flake-based ERT)

*** 
